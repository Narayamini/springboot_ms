mnvw, mnvw.cmd (mvnw clean compile test)- allows to run a Maven Project ( Maven wrapper files - automatically downloads the correct version of Maven and runs for us)
If Maven is already installed on computer then no need of the above mentioned Maven wrapper files we can simple use(mvn clean)
starter dependencies are a group of dependencies
spring-boot-maven-plugin in pom file - helps us to package our code to war or jar and we can use this to run our application as follows
./mvnw package
./mvnw spring-boot:run

@Value - to inject the property from application.properties to the class, example as below
application.properties - my.name=Harry Potter

Class level injection -
@Value("${my.name}")
private String myName;

When we place the static content in resources-> static folder, springboot will load them automatically for given app

src/main/webapp directory cannot be used if our application is package as a JAR , it only works with WAR packing and is ignored by build tools if it mentioned as jar

Templates: Springboot includes auto configuration for the following template engines and will load templates from /templates directory: FreeMarker ,ThymeLeaf, Mustache

spring-boot-devtools(we have to add the dependency) - restarts the springboot application when the code is updated instead of we manually restarting
Additional settings in intellij to enable devtools apart from adding the dependency : compiler->build project automatically, preferences->advancedsettings-> allow auto make to start

spring-boot-actuator(we have to add the dependency) - exposes endpoints to monitor health and manage our application
It automatically exposes endpoints for metrics and the endpoints are prefixed with /actuator:

/health: health info of app-gives status whether app is up or down , we can also customize the health status based on business logic, by default only health endpoint is exposed
/info: Provides more info on app and the behaviour is also customisable, to expose info endpoint we have to add management.endpoints.web.exposure.include=health,info and management.info.env.enabled=true in app.props
default info is empty and we have to customise this by adding following in app.props, anything after info. props is considered by the endpoint
(info.app.name=Name of app, info.app.description=Bank Application info.app.version=1.0.0 ) returns JSON object
/auditevents: Audit events for app
/beans: List of all beans registered in spring application context
/mappings: List of all @RequestMapping paths
There are around 10+ spring boot actuator endpoints for more info: search in spring documentation, to expose all endpoints add management.endpoints.web.exposure.include=* in app.props
We can use spring security for not exposing all this info for everyone, user have to authenticate himself for getting the info, default username is user and password is seen in console
to override the given username and password we can configure spring.security.user.name, spring,security.user.password in app.props
we can also exclude endpoints - management.endpoints.web.exposure.exclude=health,info, we can also customise spring security by retrieving username, password from db

Running SpringBoot from Command Line:
1.java -jar jarname -> first we package the code using mvnw package and then we run the generated jar by taking it from target folder
2.mvnw springboot:run

Spring boot has 1000+ configurable props which are grouped into core, web, security, data, actuator, integration, devtools, testing
Core Properties : here we are setting logging level for given package names
different logging levels- TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
logging.level.org.springframework=DEBUG
logging.level,org.hibernate=TRACE
logging.level.com.luv2code=INFO
logging.file.name=mylog.log
logging.file.path=I://myapp//applog
Web Properties:
server.port=7070
server.servlet.context-path=/myapp {Example : http://localhost:7070/myapp/endpointname}
server.servlet.session.timeout=15
Actuator Properties:
management.endpoints.web.base-path=/customactuator
Security Properties:
spring.security.user.name=user
spring.security.user.password=password
Data Properties:
spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce
spring.datasource.username=user
spring.datasource.password=password

Inversion of Control: Create and manage objects, we have spring container which is like an object factory , for example we want to talk to a create coach then our app calls the spring container
which contains all the objects of Coach based on our reference it gives out the required coach objects so here the spring container does two things
1.IOC 2.Dependency Injection: Inject Object Dependencies(Example: We call a car factory so the car factory assembles all the parts required by the car and gives me the object so here dependency injection means it assembles all the helper components of an object and gives me the wholesome object)
Configuring Spring Container:
1.xml configuration(legacy) 2.Java Annotations 3.Java Source Code

Example: We have a democontroller and the controller wants to use the Coach object so here we have to inject the coach in Controller
There are multiple types of injections, main one's are
1.Constructer Injection : recommended: highly recommended when you have required dependencies
2.Setter Injection: recommended if there are optional dependencies and default methods can be provided
3.Field Injection: not recommended by Spring team as it makes the code harder to unit test, inject dependencies by setting field values
on our class directly even private fields and accomplished by java reflection so there is no need of constructors or setters




Autowiring: Spring uses autowiring for dependency injection, whenever it is mentioned as autowired it will look for that
particular class or interface and will inject automatically, When we take the Coach example Spring will scan for @Component annotation and it will get that reference and inject
@Component: it marks the class as Spring bean which is regular Java class that is managed by Spring and also @Component makes the bean available for dependency injection, if the class has @Component then it will automatically register the beans in Spring container
@Autowired: Tells the spring to inject the dependency and it is optional when the interface has only one implementation

@SpringBootApplication : Enables AutoConfiguration, Component Scanning, Additional Configuration
So @SpringBootApplication annotation has
@EnableAutoConfiguration: Enables SpringBoot Auto Configuration Support
@ComponentScan: Enables component scanning of current package and also scans sub packages
@Configuration: able to register extra beans with @Bean or import other configuration classes

@Qualifier: If there are multiple implementations of Coach then inorder to tell spring which implementation to pickup we use Qualifier annotation
and we pass bean id which is the same as classname except that the first letter is small

@Primary: If there are multiple coach implementations we can make one of the Coach as primary by adding @Primary annotation
and the Spring brings it up so now we can get rid of the Qualifier annotation.Example here we made TrackCoach as primary

If we use @Qualifier and @Primary then @Qualifier takes higher priority

LazyInitiatlization:
@Lazy: @Lazy annotation to be added at the respective class level.Here we have added for BaseBallCoach
By default whenever our application starts all beans are initialized like all components are scanned and spring will create an instance of each of it and make them available
So instead of initializing all components and creating instances for them we can also do Lazy initialisation where spring will create the instances
if and only if the bean is needed for dependency injection or it is explicitly requested.
Lazy Initialisation at global level: We can add the prop spring.main.lazy-initiation=true to make all beans lazy
and whenever we access the endpoint then spring will determine dependencies then creates the respective dependencies
Adv: create objects when needed, helps faster start up time if there are many components
Disadv: Discovering configuration issues becomes tough as it only creates objects when called by endpoint, have to make sure there is enough memory when all beans are creates at once,

Bean Scopes: Defines lifecycle of bean, how long it is created, is it shared, how many instances are creates
By default the scope of the bean is SINGLETON : Here only single bean is created and cached in memory , all dependency injections refer to that same bean so for example
I have created two Coach objects in the controller and when I am referring to that they both point to the same CricketCoach bean stored in the memory
We can explicitly mention the scope using @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) used in CricketCoach Class
Bean Scopes:
SINGLETON - default scope, only one instance of bean is created and that is shared
PROTOTYPE - creates a new bean for each request
REQUEST - scoped to an http web request .Only used for web apps
SESSION - scoped to an http web session .Only used for web apps
GLOBAL-SESSION - scoped to global http web request .Only used for web apps

Bean Lifecycle: When Container is started beans are created , injected wherever necessary , internal processing occurs and then we have our own business logic and at last the beans are destroyed.
Bean Lifecycle Methods: Methods where we can add our own business logic during creation or destruction of beans
@PostContruct: After inititiation we can add our logic using this annotation
@PreDestroy: We can add logic which executed before beans are destroyed i.e when application is stopped
The above are used in CricketCoach class, pls refer the same.


Prototype Beans and Destroy Lifecycle
There is a subtle point you need to be aware of with "prototype" scoped beans.
For "prototype" scoped beans, Spring does not call the destroy method. Gasp!

---In contrast to the other scopes, Spring does not manage the complete lifecycle of a prototype bean: the container instantiates, configures, and otherwise assembles a prototype object, and hands it to the client, with no further record of that prototype instance.
Thus, although initialization lifecycle callback methods are called on all objects regardless of scope, in the case of prototypes, configured destruction lifecycle callbacks are not called. The client code must clean up prototype-scoped objects and release expensive resources that the prototype bean(s) are holding.

Prototype Beans and Lazy Initialization
Prototype beans are lazy by default. There is no need to use the @Lazy annotation for prototype scopes beans.

@Configuration: Instead of using spring component annotation for spring to create a bean we can use
Configuration at Class level which is used to make spring configuration to our class then we use
@Bean at method level which is used to configure the bean , here we manually create the object and return the instance of it, here the beanid
defaults to the method name and then we inject the bean to the Controller. Refer SwimConfig Class for reference.

Use Case of Spring Bean: To make an existing third party class available for spring framework as we do not have access to that third party class
























